version: "3.9"
services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${TZ}
    ports: ["5432:5432"]
    volumes: [pgdata:/var/lib/postgresql/data]
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    ports: ["6379:6379"]

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_REGION: ${MINIO_REGION}
      TZ: ${TZ}
    ports: ["9000:9000","9001:9001"]
    volumes: [minio:/data]
    healthcheck:
      test: ["CMD","curl","-f","http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 20

  create-buckets:
    image: minio/mc:latest
    depends_on: { minio: { condition: service_healthy } }
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb -p local/raw || true &&
      mc mb -p local/frames || true &&
      mc mb -p local/clips || true &&
      mc mb -p local/detections || true &&
      mc mb -p local/tracks || true &&
      mc mb -p local/homography || true &&
      mc mb -p local/models || true &&
      sleep 2 &&
      echo 'MinIO buckets ready';
      "
  
  api:
    build:
      context: ../fan-engage-api
    environment:
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      EXTERNAL_MINIO_ENDPOINT: ${EXTERNAL_MINIO_ENDPOINT}
      MINIO_REGION: ${MINIO_REGION}
      MINIO_SECURE: "0"
      BUCKET_RAW: raw
      BUCKET_FRAMES: frames
      BUCKET_DETECTIONS: detections
      BUCKET_TRACKS: tracks
      BUCKET_HOMOGRAPHY: homography
      CORS_ORIGINS: ${CORS_ORIGINS}
      TZ: ${TZ}
      BUCKET_MODELS: models
      MODEL_LATEST_META: yolov8n_football/latest.json
      MODEL_LOCAL_PATH: /models/best.pt
      MAX_SAMPLES_PER_TRACK: ${MAX_SAMPLES_PER_TRACK}
      USE_UMAP: ${USE_UMAP}
      UMAP_COMPONENTS: ${UMAP_COMPONENTS}
      ALPHA_COLOR: ${ALPHA_COLOR}
    depends_on:
      postgres: { condition: service_healthy }
      minio: { condition: service_healthy }
      create-buckets: { condition: service_completed_successfully }
    ports: ["8000:8000"]
    volumes:
      - api_models:/models

  frontend:
    build:
      context: ../fan-engage-frontend
    environment:
      NEXT_PUBLIC_API_BASE: ${NEXT_PUBLIC_API_BASE}
      TZ: ${TZ}
    depends_on:
      - api
    ports: ["3000:3000"]

  workers:
    build:
      context: ../fan-engage-workers
    depends_on:
      - redis
      - api
  ml:
    build:
      context: ../fan-engage-ml
      args:
        TORCH_INDEX_URL: https://download.pytorch.org/whl/nightly/cu128
    gpus: all
    environment:
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      BUCKET_MODELS: models
      BUCKET_FRAMES: frames
      BUCKET_DETECTIONS: detections
      BUCKET_TRACKS: tracks
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
    depends_on:
      - minio
    volumes:
      - ../datasets/football-players-detection:/data/datasets/football:ro
      - ../datasets/pitch-keypoints:/data/datasets/pitch:ro
      - ml_artifacts:/artifacts

volumes:
  pgdata:
  minio:
  ml_artifacts:
  api_models: